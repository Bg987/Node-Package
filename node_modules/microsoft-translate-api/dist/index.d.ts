/**
 * Interface representing language codes.
 */
interface LangCodes {
    [key: string]: string;
}
/**
 * Object containing language codes.
 */
declare let LANGS: LangCodes;
/**
 * Gets the standardized language code for a given language.
 * @param lang The language to get the code for.
 * @returns The standardized language code if found, otherwise undefined.
 */
declare function getLangCode(lang: Nullable<string>): string | undefined;
/**
 * Checks if a language is supported.
 * @param lang The language to check.
 * @returns True if the language is supported, otherwise false.
 */
declare function isSupported(lang: string): boolean;

declare const _default: {
    af: string;
    am: string;
    ar: string;
    as: string;
    az: string;
    ba: string;
    bg: string;
    bho: string;
    bn: string;
    bo: string;
    brx: string;
    bs: string;
    ca: string;
    cs: string;
    cy: string;
    da: string;
    de: string;
    doi: string;
    dsb: string;
    dv: string;
    el: string;
    en: string;
    es: string;
    et: string;
    eu: string;
    fa: string;
    fi: string;
    fil: string;
    fj: string;
    fo: string;
    fr: string;
    "fr-CA": string;
    ga: string;
    gl: string;
    gom: string;
    gu: string;
    ha: string;
    he: string;
    hi: string;
    hne: string;
    hr: string;
    hsb: string;
    ht: string;
    hu: string;
    hy: string;
    id: string;
    ig: string;
    ikt: string;
    is: string;
    it: string;
    iu: string;
    "iu-Latn": string;
    ja: string;
    ka: string;
    kk: string;
    km: string;
    kmr: string;
    kn: string;
    ko: string;
    ks: string;
    ku: string;
    ky: string;
    ln: string;
    lo: string;
    lt: string;
    lug: string;
    lv: string;
    lzh: string;
    mai: string;
    mg: string;
    mi: string;
    mk: string;
    ml: string;
    "mn-Cyrl": string;
    "mn-Mong": string;
    mni: string;
    mr: string;
    ms: string;
    mt: string;
    mww: string;
    my: string;
    nb: string;
    ne: string;
    nl: string;
    nso: string;
    nya: string;
    or: string;
    otq: string;
    pa: string;
    pl: string;
    prs: string;
    ps: string;
    pt: string;
    "pt-PT": string;
    ro: string;
    ru: string;
    run: string;
    rw: string;
    sd: string;
    si: string;
    sk: string;
    sl: string;
    sm: string;
    sn: string;
    so: string;
    sq: string;
    "sr-Cyrl": string;
    "sr-Latn": string;
    st: string;
    sv: string;
    sw: string;
    ta: string;
    te: string;
    th: string;
    ti: string;
    tk: string;
    "tlh-Latn": string;
    "tlh-Piqd": string;
    tn: string;
    to: string;
    tr: string;
    tt: string;
    ty: string;
    ug: string;
    uk: string;
    ur: string;
    uz: string;
    vi: string;
    xh: string;
    yo: string;
    yua: string;
    yue: string;
    "zh-Hans": string;
    "zh-Hant": string;
    zu: string;
};

declare namespace langs {
  export { _default as default };
}

type Nullable<T> = T | undefined | null;
interface TranslateOptions {
    translateOptions?: Record<string, any>;
    authenticationHeaders?: Record<string, string>;
    userAgent?: string;
    fetchOptions?: RequestInit;
}
/**
 * See https://learn.microsoft.com/azure/ai-services/translator/reference/v3-0-translate#response-body for full result structure
 */
interface TranslationResult {
    translations: {
        text: string;
        to: string;
        sentLen?: {
            srcSentLen: number[];
            transSentLen: number[];
        };
        transliteration?: {
            script: string;
            text: string;
        };
        alignment?: object;
    }[];
    detectedLanguage?: {
        language: string;
        score: number;
    };
}
/**
 * Interface representing the global configuration containing the authentication token and its expiration time.
 */
interface GlobalConfig {
    token: string;
    tokenExpiresAt: number;
}
/**
 * Fetches the global configuration including the authentication token.
 * @param userAgent Optional user agent string.
 * @returns A promise that resolves with the global configuration or void if an error occurs.
 */
declare function fetchGlobalConfig(userAgent?: string): Promise<GlobalConfig | void>;
/**
 * Checks if the authentication token is expired.
 * @returns True if the token is expired, otherwise false.
 */
declare function isTokenExpired(): boolean;
/**
 * Translates text from one language to another.
 * @param text Content to be translated.
 * @param from Source language code.
 * @param to Target language code(s).
 * @param options Optional translate options.
 * @returns A promise that resolves with the translated text or undefined if an error occurs.
 */
declare function translate(text: string | string[], from: Nullable<string>, to: string | string[], options?: TranslateOptions): Promise<TranslationResult[] | undefined>;
/**
 * Ensures authentication by fetching the global configuration if necessary.
 * @param options Optional translate options.
 */
declare function ensureAuthentication(options?: TranslateOptions): Promise<void>;
/**
 * Builds request headers including authentication headers.
 * @param options Optional translate options.
 * @returns Request headers.
 */
declare function buildHeaders(options?: TranslateOptions): Record<string, any>;

export { type GlobalConfig, LANGS, type Nullable, type TranslateOptions, type TranslationResult, buildHeaders, ensureAuthentication, fetchGlobalConfig, getLangCode, isSupported, isTokenExpired, langs, translate };
